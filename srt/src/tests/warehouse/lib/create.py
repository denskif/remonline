# ~*~ coding: utf-8 ~*~

import time

from src.lib.dom import set_value, find_element_by_selector, get_value
from src.lib.wait import (
    wait_to_see_selector, wait_selector_to_disappear, wait_for_selector, wait_condition
)
from src.lib.randomizer import make_spare_part
from src.lib.randomizer import random_int, random_x

from src.tests.warehouse.lib import (
    open_posting_dialog, DIALOG_SEL, open_write_off, submit_write_off,
    open_barcode_dialog, submit_barcode_dialog, BARCODE_TYPE_SEL,
    BARCODE_INPUT_SEL, GENERATE_BC_SEL
)
from src.tests.warehouse.lib.save_trans import save_posting
from src.tests.warehouse.lib.checkers import check_item_in_table
from src.tests.warehouse.lib.set_data import (
    add_to_posting, add_to_outcome, set_instock_good
)

from src.scaffolds.dropdown import (
    choose_category, choose_stock, choose_select_by_text
)
from src.scaffolds.dialog import open_dialog, close_dialog

from src.widget.client import fast_add_new_client



SPARES_CATEGORY = 1
STOCK_IDX = 1

DEFAULT_STOCK_NAME = "Stock_"

BASIC_ITEM_DATA = {
    u'supplier' : {'name': u"Evan's Supplies"},
    u'quantity' : u"9",
    u'price' : u"120.99",
}

# Block 1: Create posting fucn.

'''
- "item_data" argument is a dictionary
- "item_data" argument consists of 4 basic
    keys: supplier, title, quantity, price
- if "item_data" has no key "title" it will be generated by randomizer
    to create unique value
'''
def create_posting(driver, item_data=None):
    item_data = item_data or BASIC_ITEM_DATA.copy()

    open_posting_dialog(driver)

    # fill title field
    if "title" not in item_data:
        title_in_form = make_spare_part()
    else:
        title_in_form = item_data['title']

    choose_stock(driver, STOCK_IDX)

    set_value(driver, "#js-wh-title", title_in_form)
    fast_add_new_client(driver, "#js-wh-supplier", item_data['supplier'])
    choose_category(driver, SPARES_CATEGORY)

    # Lastly filling in quantity and price -->
    # so that category block won't reset data in their fields
    set_value(driver, "#l-wh-quantity", item_data['quantity'])
    set_value(driver, "#js-wh-price", item_data['price'])

    add_to_posting(driver)
    wait_selector_to_disappear(driver, ".js-c-categories")
    wait_to_see_selector(driver, ".b-dialog_type_warehouse .js-grid tbody")

    save_posting(driver)
    return title_in_form

def post_existing_item(driver, data):
    open_posting_dialog(driver)
    fast_add_new_client(driver, "#js-wh-supplier", data['supplier'])
    set_instock_good(driver, data)
    return save_posting(driver)

# Block 2: Create Category func.

def make_category():
    return "Cat_{0}".format(random_int())

def make_cat_sel(name):
    return "[data-node-title={0}]".format(name)

# This func activates dialog buttons for category
def set_cat_active(driver, node_sel=None):
    node_sel = node_sel or ".b-tree__node"

    wait_for_selector(driver, node_sel)
    return find_element_by_selector(driver, node_sel).click()

# cat_name argument is a string
def create_category(driver, cat_name=None):
    set_cat_active(driver)
    open_dialog(driver, ".js-wh-add", ".b-dialog #js-wh-title")

    if cat_name == None:
        cat_title = make_category()
    else:
        cat_title = cat_name

    set_value(driver, "#js-wh-title", cat_title)

    close_dialog(driver, ".js-submit-dialog", ".b-dialog")

    return wait_for_selector(driver, make_cat_sel(cat_title))


# Block 3: Create Stock func.

def make_stock_name():
    return u"{0}{1}".format(DEFAULT_STOCK_NAME, random_x())

def create_local_stock(driver, stock_name=None):
    stock_name = stock_name or make_stock_name()

    open_dialog(driver, ".js-wh-add", ".b-dialog #l-wh-title")
    set_value(driver, "#l-wh-title", stock_name)

    find_element_by_selector(driver, "[for=l-wh-type-local] span").click()

    return close_dialog(driver, ".js-submit-dialog", ".js-submit-dialog")

def create_global_stock(driver, stock_name=None):
    stock_name = stock_name or make_stock_name()

    open_dialog(driver, ".js-wh-add", ".b-dialog #l-wh-title")
    set_value(driver, "#l-wh-title", stock_name)

    find_element_by_selector(driver, "[for=l-wh-type-global] span").click()

    return close_dialog(driver, ".js-submit-dialog", ".js-submit-dialog")

# Block 4: Create WRITE-OFF func.

def make_write_off(driver, data):
    open_write_off(driver)
    add_to_outcome(driver, data["title"])
    return submit_write_off(driver)

# Block 5: Create Barcode func.

# Argument 'barcode_type_text' takes the text value of the barcode type
# - according to the options of dropdown
def create_barcode(driver, barcode_type_text, idx=None):
    idx = idx or 0

    open_barcode_dialog(driver)

    choose_select_by_text(driver, BARCODE_TYPE_SEL, barcode_type_text)
    find_element_by_selector(driver, GENERATE_BC_SEL).click()

    # Waiting for the back-end library to answer
    time.sleep(0.5)
    code = get_value(
        find_element_by_selector(driver, BARCODE_INPUT_SEL)
    )

    submit_barcode_dialog(driver, idx)

    return code
